@startuml

class EventHandler {
    QList<EventSystem*> subsystems
    void addSubsystem(EventSystem* subsystem)
    void prependSubsystem(VeinEvent::EventSystem* subsystem)
    void removeSubsystem(VeinEvent::EventSystem* subsystem)
    void clearSubsystems()
    #void customEvent(QEvent *event) override
}

class ModuleEventHandler {
    QList<VeinEvent::EventSystem *> moduleSystems
    void addModuleSystem(VeinEvent::EventSystem *eventSystem)
    void clearModuleSystems()
}
note top
    Modules' event systems are processed first
end note

abstract class EventSystem {
    signal void sigSendEvent(QEvent *event)
    {abstract} void processEvent(QEvent *event)
}

class IntrospectionSystem {
    void processEvent(...)
}

class StorageSystem {
    void processEvent(...)
}

class SystemModuleEventSystem {
    ' attribute-like methods
    {field} int getEntityId()
    {field} StorageSystem *getStorageSystem()
    {field}void setStorage(VeinEvent::StorageSystem *t_storageSystem)

    void processEvent(...)
    signal void sigChangeSession(const QString &t_newSession)
    signal void sigModulesPausedChanged(bool t_paused)
    void initializeEntity(const QString &sessionPath, const QStringList &sessionList)
    void setModulesPaused(bool t_paused)
}

EventHandler <|-- ModuleEventHandler
EventHandler o-- "0..*" EventSystem : forwards events to >


EventSystem <|-- IntrospectionSystem
EventSystem <|-- StorageSystem
EventSystem <|-- SystemModuleEventSystem

@enduml
