@startuml

package "vein-framework interface" <<Frame>> {
    abstract class EventSystem {
        signal void sigSendEvent(QEvent *event)
        {abstract} void processEvent(QEvent *event)
    }

    class VfCmdEventHandlerSystem {
        void processEvent(...)
        void addItem(VfCmdEventItemPtr item)
        void removeItem(VfCmdEventItemPtr item)
        -VfCmdEventHandler m_commandEventHandler
    }
}


package "Entity event filtering & distibution" <<Frame>> {
    class VfCmdEventHandler {
        void processEvent(QEvent *event)
        void addItem(VfCmdEventItemPtr item)
        void removeItem(VfCmdEventItemPtr item)
        -QHash<int, SafeDeleteSet> m_entityItems
    }
    note left: Filter (notification) command-events from\nincoming QEvents and distribute them to\nVfCmdEventItem items with matching entity ID

    abstract class VfEntityEventItem {
        int getEntityId()
        EventSystem* getEventSystem()
        void setEventSystem(EventSystem* eventSystem)
        {abstract} void processCommandEvent(CommandEvent *cmdEvent)
        {abstract} void processErrorCommandEventData(EventData *originalEventData)
    }

    class VfClientEntitySubscriber {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
    }

    class VfClientEntityUnsubscriber {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
    }

    class VfCmdEventItemEntity {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
        void addItem(VfCmdEventItemComponentPtr item)
        void removeItem(VfCmdEventItemComponentPtr item)
        -QHash<QString, SafeDeleteSet> m_componentItems
    }
    note top of VfCmdEventItemEntity: Filter component-(error-)data from incoming\ncommand-events/error-event-data and distribute\nto VfComponentEventItem items
}

package "Component-data filtering & distibution" <<Frame>> {
abstract class VfComponentEventItem {
    {abstract} void processComponentEventData(ComponentData *componentData)
    {abstract} void processErrorComponentEventData(ComponentData *originalComponentData)
    int getEntityId()
    QString &getComponentName()
    EventSystem *getEventSystem()
}

class VfClientComponentFetcher {
    void processComponentEventData(...)
    void processErrorComponentEventData(...)
}

class VfClientComponentSetter {
    void processComponentEventData(...)
    void processErrorComponentEventData(...)
}

class VfComponentChangeNotifier {
    void processComponentEventData(..)
    void processErrorComponentEventData(...)
}
}

EventSystem <|-- VfCmdEventHandlerSystem

VfCmdEventHandlerSystem *-- "1" VfCmdEventHandler : owns >
VfCmdEventHandler o-- "0..*" VfEntityEventItem : has shared entity items >

EventSystem <-- VfEntityEventItem: emit sigSendEvent

VfEntityEventItem <|-- VfClientEntitySubscriber
VfEntityEventItem <|-- VfClientEntityUnsubscriber

VfEntityEventItem <|-- VfCmdEventItemEntity
VfCmdEventItemEntity o-- "0..*" VfComponentEventItem : has shared component items >

VfComponentEventItem <|-- VfClientComponentFetcher
VfComponentEventItem <|-- VfClientComponentSetter
VfComponentEventItem <|-- VfComponentChangeNotifier

@endum
