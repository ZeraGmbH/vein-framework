@startuml

package "vein-framework interface" <<Frame>> {
    abstract class EventSystem {
        signal void sigSendEvent(QEvent *event)
        {abstract} void processEvent(QEvent *event)
    }

    class VfCmdEventHandlerSystem {
        void processEvent(...)
        void addItem(VfCmdEventItemPtr item)
        void removeItem(VfCmdEventItemPtr item)
        -VfCmdEventHandler m_commandEventHandler
    }
}


package "Entity event filtering & distibution" <<Frame>> {
    class VfCmdEventHandler {
        void processEvent(QEvent *event)
        void addItem(VfCmdEventItemPtr item)
        void removeItem(VfCmdEventItemPtr item)
        -QHash<int, SafeDeleteSet> m_entityItems
    }
    note right: Filter (notification) command-events from\nincoming QEvents and distribute them to\nVfCmdEventItem items with matching entity ID

    abstract class VfEntityEventItem {
        int getEntityId()
        void sendEvent(QEvent *event)
        {abstract} void processCommandEvent(CommandEvent *cmdEvent)
        {abstract} void processErrorCommandEventData(EventData *originalEventData)
    }

    class VfClientEntitySubscriber {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
        void sendSubscription()
        signal void sigSubscribed(bool ok, int entityId)
    }

    class VfClientEntityUnsubscriber {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
        void sendUnsubscription()
        signal void sigUnsubscribed(bool ok, int entityId)
    }

    class VfEntityComponentEventItem {
        void processCommandEvent(...)
        void processErrorCommandEventData(...)
        void addItem(VfCmdEventItemComponentPtr item)
        void removeItem(VfCmdEventItemComponentPtr item)
        -QHash<QString, SafeDeleteSet> m_componentItems
    }
    note top: Filter component-(error-)data from incoming\nand distribute to VfComponentEventItem items
    ' force layout
    VfClientEntitySubscriber -[hidden]> VfClientEntityUnsubscriber
    VfClientEntityUnsubscriber -[hidden]> VfEntityComponentEventItem
}

package "Component-data filtering & distibution" <<Frame>> {
    abstract class VfComponentEventItem {
        int getEntityId()
        QString &getComponentName()
        void sendEvent(QEvent *event)
        {abstract} void processComponentEventData(ComponentData *componentData)
        {abstract} void processErrorComponentEventData(ComponentData *originalComponentData)
    }

    class VfClientComponentFetcher {
        void processComponentEventData(...)
        void processErrorComponentEventData(...)
        void startGetComponent()
        signal void sigGetFinish(bool ok, QVariant value)
    }

    class VfClientComponentSetter {
        void processComponentEventData(...)
        void processErrorComponentEventData(...)
        void startSetComponent(QVariant oldValue, QVariant newValue)
        signal void sigSetFinish(bool ok)
    }

    class VfComponentChangeNotifier {
        void processComponentEventData(..)
        void processErrorComponentEventData(...)
        signal void sigValueChanged()
    }
}

EventSystem <|-- VfCmdEventHandlerSystem

VfCmdEventHandlerSystem *-- "1" VfCmdEventHandler : owns >
VfCmdEventHandler o-- "0..*" VfEntityEventItem : has shared entity items >

VfEntityEventItem <|-- VfClientEntitySubscriber
VfEntityEventItem <|-- VfClientEntityUnsubscriber

VfEntityEventItem <|-- VfEntityComponentEventItem
VfEntityComponentEventItem o-- "0..*" VfComponentEventItem : has shared component items >

VfComponentEventItem <|-- VfClientComponentFetcher
VfComponentEventItem <|-- VfClientComponentSetter
VfComponentEventItem <|-- VfComponentChangeNotifier

@endum
